package com.example.products_ms.handlers;

import com.example.products_ms.models.Product;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;
import reactor.core.publisher.Mono;

import java.util.Map;

/**
 * This [handler class] is used to control and manage the [requests] and then it create the
 * responses.
 * This uses the [Reactive approachability]
 * Uses the [@Component] decorator to create a [Bean]
 * The method [ProductHandler.productHandler] receive the [request] by the client and create the [response]
 * <p>
 * In Spring Reactive approach we need to use [handlers] to manage or handle the requests and create a [response]
 * Instead of using [Controllers] as other approaches as [Template Restfull] we use here [handlers]
 */
@Component
public class ProductsHandler {

    /**
     * Use Mono object to represent the Reactive Approach.
     * This method always returns  a JSON with the according message.
     * This class can be returned other many things as,items streams from a database.  [streams] that was generated by
     * any calculations, and so on .
     *
     * @param request
     * @return
     */
    public Mono<ServerResponse> productsHandler(ServerRequest request) {
        // 1. Create a product

        return ServerResponse.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(Map.of("message", "Hello World with with Spring Boot v3 and WebFlux!"))); // TODO("replace the string by anything")
    }


}
